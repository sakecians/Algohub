{"version":3,"sources":["Algorithms/BubbleSort.js","Algorithms/Test.js","Algorithms/QuickSort.js","Algorithms/RadixSort.js","context/Algorithm.context.js","Components/Explaination/Text.js","Components/Video/Video.jsx","Components/Explaination/Explaination.jsx","Components/Navbar/Navbar.jsx","Components/Visualizer/Helpers.js","Components/CodeView/CodeView.jsx","Algorithms/Codes.js","Components/CodeView/CodeViewPy.jsx","Components/CodeView/CodeViewJava.jsx","Components/Visualizer/Visualizer.jsx","App.js","index.js"],"names":["getBubbleSortAnimation","array","animations","passedArr","slice","i","length","noSwaps","j","push","temp","getMergeSortAnimations","arr","mergeSort","leftIdx","rightIdx","midIdx","Math","floor","start","mid","end","start2","value","index","merge","pivot","animation","swap","idx1","idx2","swapIdx","getQuickSortAnimation","left","right","pivotIndex","getDigit","num","abs","pow","getRadixSortAnimations","nums","maxDigitCount","maxDigits","max","log10","mostDigits","k","digitBuckets","Array","from","concat","AlgorithmContext","createContext","AlgorithmProvider","props","useState","algorithm","setAlgorithm","Provider","updateAlgorithm","newAlgorithm","children","explaination","exp","timeComplexity","bestCase","avgCase","worstCase","spaceComplexity","bubble","quick","radix","VideoPlayer","useContext","videoUrl","setVideoUrl","useEffect","url","Explaination","data","className","style","textTransform","Video","map","algo","Navbar","ANIMATION_SPEED","SPEED","setArray","resetArray","bubbleSort","quickSort","radixSort","speed","onChange","e","target","href","CodeView","language","docco","CodeViewJava","numberToWord","parsed","toString","split","result","join","colorChange","one","two","classNameA","classNameB","childA","document","querySelector","childB","classList","add","setTimeout","remove","background","placeCorrect","swapAinmation","finalChildAStyle","x","y","finalChildBStyle","getBoundingClientRect","top","transform","removeAttribute","height","textContent","randomIntFromInterval","min","random","moveElementTo","idx","querySelectorAll","heightA","heightB","textA","textB","mergeColorChange","arr1","arr2","child","randomColor","completedColor","color","bars","groupChangeColor","bar","myLoop","a","sort","digitBucket","Visualizer","size","setSize","passedValue","setValue","Number","UseInputState","setSpeed","isDisabled","newArray","type","onClick","alert","cls","App","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.a644a8c2.chunk.js","sourcesContent":["// export function getBubbleSortAnimation(array){\r\n//     let animations = [];\r\n//     let passedArr = array.slice();\r\n//     for(let i=passedArr.length; i>0; i--){\r\n//         var noSwaps = true;\r\n//         for(let j=0; j<(i-1); j++){\r\n//             if(passedArr[j] > passedArr[j+1]) {\r\n//                 animations.push([passedArr[j],passedArr[j+1]]);\r\n//                 let temp   = passedArr[j+1];\r\n//                 passedArr[j+1] = passedArr[j];\r\n//                 passedArr[j]   = temp;\r\n//                 noSwaps = false;\r\n//             }\r\n//         }\r\n//         if(noSwaps) break;\r\n//     }\r\n//     return animations;\r\n// }\r\n\r\nexport function getBubbleSortAnimation(array){\r\n    let animations = [];\r\n    let passedArr = array.slice();\r\n    for(let i=passedArr.length; i>0; i--){\r\n        var noSwaps = true;\r\n        let j;\r\n        for(j=0; j<(i-1); j++){\r\n            animations.push([passedArr[j],passedArr[j+1]]);\r\n            if(passedArr[j] > passedArr[j+1]) {\r\n                noSwaps = false;\r\n                let temp   = passedArr[j+1];\r\n                passedArr[j+1] = passedArr[j];\r\n                passedArr[j]   = temp;\r\n            }\r\n        }\r\n        if(noSwaps){\r\n            animations.push([\"sorted\"])\r\n            break;\r\n        }\r\n        animations.push([passedArr[j]]);\r\n    }\r\n    return animations;\r\n}\r\n","let animations = [];\r\nexport function getMergeSortAnimations(arr){\r\n    animations = [];\r\n    mergeSort(arr, 0, arr.length - 1);\r\n    animations.push([\"completed\"]);\r\n    return animations;\r\n}\r\nfunction mergeSort(arr, leftIdx, rightIdx){\r\n    if(leftIdx < rightIdx){\r\n        let midIdx = Math.floor((leftIdx+rightIdx) / 2);\r\n\r\n        mergeSort(arr, leftIdx, midIdx);\r\n        mergeSort(arr, midIdx+1, rightIdx);\r\n\r\n        merge(arr, leftIdx, midIdx, rightIdx);\r\n\r\n    }\r\n}\r\n\r\nfunction merge(arr, start, mid, end){\r\n    let start2 = mid + 1;\r\n    // console.log(`Merging left : ${arr.slice(start, mid+1)} right : ${arr.slice(start2,end+1)}`);\r\n    animations.push([\"merge\", arr.slice(start, mid+1), arr.slice(start2, end+1)]);\r\n\r\n    if(arr[mid] <= arr[start2]) {\r\n        return;\r\n    }\r\n\r\n    while(start <= mid && start2 <= end){\r\n        if(arr[start] <= arr[start2] ) {\r\n            animations.push([\"compare\", arr[start], arr[start2]]);\r\n            start++;\r\n        }else {\r\n            let value = arr[start2];\r\n            let index = start2;\r\n\r\n            // Shift all the elements between element 1\r\n            // element 2, right by 1.\r\n            while (index !== start) {\r\n                // console.log(`Moving ${index-1} to ${index}`)\r\n                animations.push([index, arr[index-1]]);\r\n                arr[index] = arr[index - 1];\r\n                index--;\r\n            }\r\n            arr[start] = value;\r\n\r\n            // Update all the pointers\r\n            start++;\r\n            mid++;\r\n            start2++;\r\n        }\r\n    }\r\n}","\r\nfunction pivot(arr, start = 0, end = arr.length - 1, animation) {\r\n  const swap = (arr, idx1, idx2) => {\r\n    [arr[idx1], arr[idx2]] = [arr[idx2], arr[idx1]];\r\n  };\r\n\r\n  // We are assuming the pivot is always the first element\r\n  let pivot = arr[start];\r\n  let swapIdx = start;\r\n\r\n  for (let i = start + 1; i <= end; i++) {\r\n    animation.push([\"compare\", pivot, arr[i]]);  \r\n    if (pivot > arr[i]) {\r\n      swapIdx++;\r\n      swap(arr, swapIdx, i);\r\n      animation.push([arr[swapIdx], arr[i]]);\r\n    }\r\n  }\r\n\r\n  // Swap the pivot from the start the swapPoint\r\n  animation.push([arr[start], arr[swapIdx]]);\r\n  swap(arr, start, swapIdx);\r\n  animation.push([\"placed\", arr[swapIdx]]);\r\n  return swapIdx;\r\n}\r\n\r\n\r\nexport function getQuickSortAnimation(arr, left = 0, right = arr.length -1, animation=[]){\r\n    if(left < right){\r\n        let pivotIndex = pivot(arr, left, right, animation) //3\r\n        //left\r\n        getQuickSortAnimation(arr,left,pivotIndex-1, animation);\r\n        //right\r\n        getQuickSortAnimation(arr,pivotIndex+1,right, animation);\r\n      }\r\n     return animation;\r\n} \r\n\r\n\r\n\r\n\r\n\r\n","function getDigit(num, i) {\r\n  return Math.floor(Math.abs(num) / Math.pow(10, i)) % 10;\r\n}\r\n\r\nfunction digitCount(num) {\r\n  if (num === 0) return 1;\r\n  return Math.floor(Math.log10(Math.abs(num))) + 1;\r\n}\r\n\r\nfunction mostDigits(nums) {\r\n  let maxDigits = 0;\r\n  for (let i = 0; i < nums.length; i++) {\r\n    maxDigits = Math.max(maxDigits, digitCount(nums[i]));\r\n  }\r\n  return maxDigits;\r\n}\r\n\r\nexport function getRadixSortAnimations(nums){\r\n    let animations = [];\r\n    let maxDigitCount = mostDigits(nums);\r\n    for(let k = 0; k < maxDigitCount; k++){\r\n        let digitBuckets = Array.from({length: 10}, () => []);\r\n        for(let i = 0; i < nums.length; i++){\r\n            let digit = getDigit(nums[i],k);\r\n            digitBuckets[digit].push(nums[i]);\r\n        }\r\n        animations.push([\"digitBucket\", digitBuckets])\r\n        nums = [].concat(...digitBuckets);\r\n        animations.push([\"nums\", nums])\r\n    }\r\n    return animations;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, { createContext, useState} from 'react';\r\n\r\nexport const AlgorithmContext = createContext();\r\n\r\nexport function AlgorithmProvider(props){\r\n\r\n    const [algorithm, setAlgorithm] = useState(\"bubble\");\r\n    \r\n    function updateAlgorithm(newAlgorithm){\r\n        setAlgorithm((algorithm) => {\r\n            return newAlgorithm;\r\n        })\r\n    }\r\n\r\n    return(\r\n        <AlgorithmContext.Provider value={{algorithm, updateAlgorithm}}>\r\n            {props.children}\r\n        </AlgorithmContext.Provider>\r\n    )\r\n}","// 3 col\r\n// 1 - explaination\r\n// 2 - algorithm\r\n// 3 - application\r\n\r\nexport const merge = {\r\n    explaination: {\r\n        exp: \"Merge sort is a sorting technique based on divide and conquer technique. Merge sort first divides the array into equal halves and then combines them in a sorted manner. The merge() function is used for merging two halves. Merge sort keeps on dividing the list into equal halves until there is only a single element left in the list. The single element in the list is considered as sorted list. Merge sort combines the smaller sorted list and enters into the new list in sorted order.\",\r\n        timeComplexity: {\r\n            bestCase: 'O(n log n)',\r\n            avgCase: 'O(n log n)',\r\n            worstCase: 'O(n log n)',\r\n        },\r\n        spaceComplexity: 'O(n)',\r\n        algorithm: [\r\n            'Break up the array into halves until you have arrays that are empty or have one element.',\r\n            'Once you have smaller sorted arrays, merge those arrays with other sorted arrays until you are back at the full length of the array.',\r\n            'Once the array has been merged back together, return the merged and sorted array',\r\n        ],\r\n    }\r\n}\r\n\r\nexport const bubble = {\r\n    explaination: {\r\n        exp: \"Bubble Sort is a simple algorithm which is used to sort a given set of n elements provided in form of an array with n number of elements. Bubble Sort compares all the element one by one and sort them based on their values. Bubble sort, also referred to as comparison sort.  It is known as bubble sort, because with every complete iteration the largest element in the given array, bubbles up towards the last place or the highest index, just like a water bubble rises up to the water surface.\",\r\n        timeComplexity: {\r\n            bestCase: 'O(n)',\r\n            avgCase: 'O(n^2)',\r\n            worstCase: 'O(n^2)',\r\n        },\r\n        spaceComplexity: 'O(1)',\r\n        algorithm: [\r\n            'Starting with the first element(index = 0), compare the current element with the next element of the array.',\r\n            'If the current element is greater than the next element of the array, swap them.',\r\n            'If the current element is less than the next element, move to the next element. Repeat Step 1.',\r\n\r\n            'If we have total n elements, then we need to repeat this process for n-1 times.',\r\n        ],\r\n    }\r\n}\r\n\r\nexport const quick = {\r\n    explaination: {\r\n        exp: \"Quick sort is a highly efficient sorting algorithm and is based on partitioning of array of data into smaller arrays. A large array is partitioned into two arrays one of which holds values smaller than the specified value, say pivot, based on which the partition is made and another array holds values greater than the pivot value. This algorithm is quite efficient for large-sized data sets.There are different versions:- 1] Always pick first element as pivot, 2]Always pick last element as pivot, 3]Pick a random element as pivot, 4]Pick median as pivot.\",\r\n        timeComplexity: {\r\n            bestCase: 'O(n log n)',\r\n            avgCase: 'O(n log n)',\r\n            worstCase: 'O(n^2)',\r\n        },\r\n        spaceComplexity: 'O(n)',\r\n        algorithm: [\r\n            'Choose the highest index value has pivot',\r\n            'Take two variables to point left and right of the list excluding pivot',\r\n            'left points to the low index',\r\n            'right points to the high',\r\n            'while value at left is less than pivot move right',\r\n            'while value at right is greater than pivot move left',\r\n            'if both step 5 and step 6 does not match swap left and right',\r\n            'if left ≥ right, the point where they met is new pivot',\r\n\r\n        ],\r\n    }\r\n}\r\n\r\nexport const radix = {\r\n    explaination: {\r\n        exp: \"Radix sort is a sorting technique based on divide and conquer technique. Merge sort first divides the array into equal halves and then combines them in a sorted manner. The merge() function is used for merging two halves. Merge sort keeps on dividing the list into equal halves until there is only a single element left in the list. The single element in the list is considered as sorted list. Merge sort combines the smaller sorted list and enters into the new list in sorted order.\",\r\n        timeComplexity: {\r\n            bestCase: 'O(n log n)',\r\n            avgCase: 'O(n log n)',\r\n            worstCase: 'O(n log n)',\r\n        },\r\n        spaceComplexity: 'O(n)',\r\n        algorithm: [\r\n            'Break up the array into halves until you have arrays that are empty or have one element.',\r\n            'Once you have smaller sorted arrays, merge those arrays with other sorted arrays until you are back at the full length of the array.',\r\n            'Once the array has been merged back together, return the merged and sorted array',\r\n        ],\r\n    }\r\n}","import React, { useState, useEffect,useContext } from \"react\";\r\nimport ReactPlayer from \"react-player\";\r\nimport { AlgorithmContext } from \"../../context/Algorithm.context\";\r\n\r\nfunction VideoPlayer() {\r\n\r\nconst {algorithm} = useContext(AlgorithmContext);\r\n\r\nconst [videoUrl, setVideoUrl] = useState(\"bubble\");\r\n\r\nconst videos = ()=>{\r\n    if (algorithm === 'bubble'){\r\n        setVideoUrl(\"https://youtu.be/wjUDU5dryes\");\r\n    }\r\n    if (algorithm === 'merge'){\r\n        setVideoUrl(\"https://youtu.be/upuopofDb2Q\");\r\n    }\r\n    if (algorithm === 'quick'){\r\n        setVideoUrl(\"https://youtu.be/rzAUr856LW8\");\r\n    }\r\n    if (algorithm === 'radix'){\r\n        setVideoUrl(\"https://youtu.be/upuopofDb2Q\");\r\n    }\r\n}\r\n\r\nuseEffect(() => {\r\n    videos();\r\n})\r\n\r\n\r\n  return (\r\n    <div>\r\n      <ReactPlayer\r\n        url={videoUrl}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default VideoPlayer;","import React, {useContext} from \"react\";\r\nimport { AlgorithmContext } from \"../../context/Algorithm.context\";\r\nimport {merge, bubble, quick, radix} from './Text';\r\nimport \"./Explaination.scss\";\r\nimport VideoPlayer from '../Video/Video';\r\n\r\n// import { YoutubePlayer } from \"reactjs-media\";\r\n// const App = () => {\r\n//   return (\r\n//       <div>\r\n//           <YoutubePlayer\r\n//               src=\"https://youtu.be/MIDWBfjW2v4\" \r\n//               width={650}\r\n//               height={600}\r\n//           />\r\n//       </div>\r\n//   );\r\n// };\r\n\r\n\r\n\r\n\r\n\r\nfunction Explaination(props) {\r\n  const { algorithm } = useContext(AlgorithmContext);\r\n  const data = algorithm === \"bubble\" ? bubble : algorithm === \"quick\" ? quick : algorithm === \"merge\" ? merge : radix;\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"container__header\">\r\n        <h2 style={{textTransform: 'uppercase'}}>{algorithm} SORT</h2>\r\n      </div>\r\n        <VideoPlayer/>\r\n      <div className=\"container__cols\">\r\n        <div className=\"container__cols--item\">\r\n          <h4>Explanation</h4>\r\n          <div>\r\n            {data.explaination.exp}\r\n          </div>\r\n        </div>\r\n        <div className=\"container__cols--item\">\r\n          <h4>Algorithm</h4>\r\n          <div>\r\n            <ul>\r\n              {data.explaination.algorithm.map((algo) => (\r\n                <li>{algo}</li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n        </div>\r\n        <div className=\"container__cols--item\">\r\n          <h4>Complexity</h4>\r\n          <div>\r\n            <div>\r\n              <div>\r\n                Time Complexity:\r\n              </div>\r\n              <div>\r\n                <ul>\r\n                  <li>Best case : {data.explaination.timeComplexity.bestCase}</li>\r\n                  <li>Average case : {data.explaination.timeComplexity.avgCase}</li>\r\n                  <li>Worst case : {data.explaination.timeComplexity.worstCase}</li>\r\n                </ul>\r\n              </div>\r\n            </div>\r\n            <div>\r\n              <div>\r\n                Space Complexity:\r\n              </div>\r\n              <div>\r\n                <ul>\r\n                  <li>{data.explaination.spaceComplexity}</li>\r\n                </ul>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Explaination;\r\n","import React, { useContext } from \"react\";\r\nimport \"./Navbar.scss\";\r\nimport { AlgorithmContext } from \"../../context/Algorithm.context\";\r\n\r\nfunction Navbar(props) {\r\n  const {\r\n    setArray,\r\n    resetArray,\r\n    array,\r\n    bubbleSort,\r\n    mergeSort,\r\n    quickSort,\r\n    radixSort,\r\n    speed,\r\n  } = props;\r\n\r\n  const { algorithm, updateAlgorithm } = useContext(AlgorithmContext);\r\n\r\n  return (\r\n    <div className=\"nav\">\r\n      <div className=\"nav__brand\">\r\n        <p>ALGOHUB</p>\r\n      </div>\r\n      <div className=\"nav__algo\">\r\n        <select\r\n          value={algorithm}\r\n          onChange={(e) => updateAlgorithm(e.target.value)}\r\n          className=\"nav__select\"\r\n        >\r\n          <option value=\"bubble\">Bubble Sort</option>\r\n          <option value=\"merge\">Merge Sort</option>\r\n          <option value=\"quick\">Quick Sort</option>\r\n          <option value=\"radix\">Radix Sort</option>\r\n        </select>\r\n\r\n        <a\r\n          className=\"quiz\"\r\n         href=\"https://docs.google.com/forms/d/e/1FAIpQLSfcyVmlJNaBdu0sf5S9TAuJ1qu9ai1sHZ5I7naYO53r4azMmw/viewform?usp=sf_link\"\r\n       \r\n        >\r\n          Quiz\r\n        </a>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Navbar;\r\n","import {getQuickSortAnimation} from '../../Algorithms/QuickSort';\r\n\r\nimport { useState } from 'react';\r\n\r\nexport let ANIMATION_SPEED;\r\n\r\nlet SPEED;\r\n\r\nexport const UseInputState = (passedValue) => {\r\n    const [value, setValue] = useState(passedValue);\r\n    const handleChange = e => {\r\n      let value = Number(e.target.value);\r\n        setValue(value);\r\n        ANIMATION_SPEED = value;\r\n        SPEED = ANIMATION_SPEED-200;\r\n    };\r\n    return [value, handleChange];\r\n};\r\n\r\n\r\n\r\nexport function numberToWord(num){\r\n    let parsed = num.toString().split('');\r\n    let result = [];\r\n    for(let i=0; i<parsed.length; i++){\r\n        if(parsed[i] === \"0\") result.push(\"zero\")\r\n        else if(parsed[i] === \"1\") result.push(\"one\")\r\n        else if(parsed[i] === \"2\") result.push(\"two\")\r\n        else if(parsed[i] === \"3\") result.push(\"three\")\r\n        else if(parsed[i] === \"4\") result.push(\"four\")\r\n        else if(parsed[i] === \"5\") result.push(\"five\")\r\n        else if(parsed[i] === \"6\") result.push(\"six\")\r\n        else if(parsed[i] === \"7\") result.push(\"seven\")\r\n        else if(parsed[i] === \"8\") result.push(\"eight\")\r\n        else if(parsed[i] === \"9\") result.push(\"nine\")\r\n    }\r\n    return result.join('');\r\n}\r\n\r\nexport function colorChange(one, two){\r\n  let classNameA = numberToWord(one);\r\n  let classNameB = numberToWord(two);\r\n  const childA = document.querySelector(`.${classNameA}`);\r\n  const childB = document.querySelector(`.${classNameB}`);\r\n\r\n  childA.classList.add('compare');\r\n  childB.classList.add('compare');\r\n\r\n  setTimeout(() => {\r\n    childA.classList.remove('compare');\r\n    childB.classList.remove('compare');\r\n    childA.style.background = 'turquoise';\r\n    childB.style.background = 'turquoise';\r\n  }, SPEED);\r\n}\r\n\r\nexport function colorChangeSingle(one){\r\n  let classNameA = numberToWord(one);\r\n  const childA = document.querySelector(`.${classNameA}`);\r\n\r\n  childA.classList.add('compare');\r\n\r\n  setTimeout(() => {\r\n    childA.classList.remove('compare');\r\n  }, SPEED);\r\n}\r\n\r\nexport function placeCorrect(one){\r\n  let className = numberToWord(one);\r\n  const child = document.querySelector(`.${className}`);\r\n\r\n  child.classList.add(\"placed\");\r\n}\r\n\r\nexport function swapAinmation(one, two){\r\n    let classNameA = numberToWord(one);\r\n    let classNameB = numberToWord(two);\r\n    const childA = document.querySelector(`.${classNameA}`);\r\n    const childB = document.querySelector(`.${classNameB}`);\r\n    const finalChildAStyle = {\r\n        x: null,\r\n        y: null,\r\n    };\r\n    const finalChildBStyle = {\r\n        x: null,\r\n        y: null,\r\n    };\r\n    \r\n    childA.classList.add('transition');\r\n    childB.classList.add('transition');\r\n    finalChildAStyle.x = childB.getBoundingClientRect().left - childA.getBoundingClientRect().left;\r\n    finalChildAStyle.y = childA.getBoundingClientRect().top - childB.getBoundingClientRect().top;\r\n    finalChildBStyle.x = childA.getBoundingClientRect().left - childB.getBoundingClientRect().left;\r\n    finalChildBStyle.y = childB.getBoundingClientRect().top - childA.getBoundingClientRect().top;\r\n    childA.style.transform = `translate(${finalChildAStyle.x}px, ${finalChildAStyle.y}px)`;\r\n    childB.style.transform = `translate(${finalChildBStyle.x}px, ${finalChildBStyle.y}px)`;\r\n\r\n    setTimeout(() => {\r\n    //   document.querySelector('.container').insertBefore(childB, childA);\r\n      childA.classList.remove('transition');\r\n      childB.classList.remove('transition');\r\n\r\n      childA.classList.remove(classNameA);\r\n      childB.classList.remove(classNameB);\r\n\r\n      childA.removeAttribute('style');\r\n      childB.removeAttribute('style');\r\n      \r\n      childA.style.height = `${two}px`;\r\n      childB.style.height = `${one}px`;\r\n\r\n      childA.classList.add(classNameB);\r\n      childB.classList.add(classNameA)\r\n\r\n      childA.style.background = 'turquoise';\r\n      childB.style.background = 'turquoise';\r\n\r\n      childA.textContent = two;\r\n      childB.textContent = one;\r\n    }, SPEED);\r\n}\r\n\r\nexport function testSortingAlgorithms() {\r\n    for (let i = 0; i < 100; i++) {\r\n      const array = [];\r\n      const length = randomIntFromInterval(1, 1000);\r\n      for (let i = 0; i < length; i++) {\r\n        array.push(randomIntFromInterval(-1000, 1000));\r\n      }\r\n      const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\r\n      const quickSortedArray = getQuickSortAnimation(array.slice());\r\n      console.log(arraysAreEqual(javaScriptSortedArray, quickSortedArray));\r\n    }\r\n}\r\n\r\nexport function arraysAreEqual(arrayOne, arrayTwo) {\r\n  if (arrayOne.length !== arrayTwo.length) return false;\r\n  for (let i = 0; i < arrayOne.length; i++) {\r\n    if (arrayOne[i] !== arrayTwo[i]) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\n// From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\r\nexport function randomIntFromInterval(min, max) {\r\n  // min and max included\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\nexport function moveElementTo(idx, value){\r\n  let classNameB = numberToWord(value);\r\n  const childA = document.querySelectorAll(\".array-bars\")[idx];\r\n  const childB = document.querySelector(`.${classNameB}`);\r\n  let heightA = childA.style.height;\r\n  let heightB = childB.style.height;\r\n  let classNameA = childA.classList.value.split(' ')[1];\r\n  let textA = childA.textContent;\r\n  let textB = childB.textContent;\r\n\r\n\r\n  const finalChildAStyle = {\r\n      x: null,\r\n      y: null,\r\n  };\r\n  const finalChildBStyle = {\r\n      x: null,\r\n      y: null,\r\n  };\r\n    childA.classList.add('transition');\r\n    childB.classList.add('transition');\r\n  finalChildAStyle.x = childB.getBoundingClientRect().left - childA.getBoundingClientRect().left;\r\n  finalChildAStyle.y = childA.getBoundingClientRect().top - childB.getBoundingClientRect().top;\r\n  finalChildBStyle.x = childA.getBoundingClientRect().left - childB.getBoundingClientRect().left;\r\n  finalChildBStyle.y = childB.getBoundingClientRect().top - childA.getBoundingClientRect().top;\r\n  childA.style.transform = `translate(${finalChildAStyle.x}px, ${finalChildAStyle.y}px)`;\r\n  childB.style.transform = `translate(${finalChildBStyle.x}px, ${finalChildBStyle.y}px)`;\r\n\r\n  setTimeout(() => {\r\n  //   document.querySelector('.container').insertBefore(childB, childA);\r\n    childA.classList.remove('transition');\r\n    childB.classList.remove('transition');\r\n\r\n    childA.classList.remove(classNameA);\r\n    childB.classList.remove(classNameB);\r\n\r\n    childA.removeAttribute('style');\r\n    childB.removeAttribute('style');\r\n    \r\n    childA.style.height = heightB;\r\n    childB.style.height = heightA;\r\n\r\n    childA.classList.add(classNameB);\r\n    childB.classList.add(classNameA)\r\n\r\n    childA.style.background = 'turquoise';\r\n    childB.style.background = 'turquoise';\r\n\r\n    childA.textContent = textB;\r\n    childB.textContent = textA;\r\n  }, SPEED);\r\n}\r\n\r\nexport function mergeColorChange(arr1, arr2){\r\n  for(let i=0; i < arr1.length; i++){\r\n    let className = numberToWord(arr1[i]);\r\n    let child = document.querySelector(`.${className}`);\r\n    child.style.background = '#da00f7';\r\n    setTimeout(function() {\r\n      child.style.background = 'turquoise';\r\n    }, SPEED)\r\n  }\r\n  for(let i=0; i < arr2.length; i++){\r\n    let className = numberToWord(arr2[i]);\r\n    let child = document.querySelector(`.${className}`);\r\n    child.style.background = \"#750485\";\r\n    setTimeout(function() {\r\n      child.style.background = 'turquoise';\r\n    }, SPEED)\r\n  }\r\n}\r\n\r\n\r\n\r\nfunction generateRandomColors(num){\r\n\r\n  var a = [];\r\n\r\n  for(var i=0; i<num; i++){\r\n      a.push(randomColor());\r\n  }\r\n\r\n  return a;\r\n\r\n}\r\n\r\nfunction randomColor(){\r\n\r\n  let r = Math.floor(Math.random() * 256);\r\n\r\n  let g = Math.floor(Math.random() * 256);\r\n\r\n  let b = Math.floor(Math.random() * 256);\r\n\r\n  return \"rgb(\" + r + \", \" + g + \", \" + b + \")\";\r\n\r\n}\r\n\r\nexport function changeBarColor(){\r\n  let bars = document.querySelectorAll(\".array-bars\");\r\n  let colors = generateRandomColors(bars.length);\r\n  for(let i=0; i<bars.length; i++){\r\n    bars[i].style.background = colors[i];\r\n  }\r\n}\r\n\r\nexport function completedColor(color){\r\n  let bars = document.querySelectorAll(\".array-bars\");\r\n  for(let i=0; i<bars.length; i++){\r\n    bars[i].style.background = color;\r\n  }\r\n}\r\n\r\nexport function groupChangeColor(arr){\r\n  let bars = [];\r\n  let color = randomColor();\r\n  for(let i=0; i<arr.length; i++){\r\n    let className = numberToWord(arr[i]);\r\n    let bar = document.querySelector(`.${className}`);\r\n    bars.push(bar);\r\n  }\r\n  // console.log(bars);\r\n  for(let i=0; i<bars.length; i++){\r\n    bars[i].style.background = color;\r\n  } \r\n}\r\n","import React, {useContext} from 'react';\r\nimport {JS_BUBBLE, JS_QUICK, JS_MERGE, JS_RADIX} from '../../Algorithms/Codes';\r\nimport {AlgorithmContext} from '../../context/Algorithm.context';\r\nimport SyntaxHighlighter from 'react-syntax-highlighter';\r\nimport { docco } from 'react-syntax-highlighter/dist/esm/styles/hljs';\r\n\r\nexport default function CodeView() {\r\n    const {algorithm} = useContext(AlgorithmContext);\r\n\r\n    return (\r\n        <div>\r\n            <SyntaxHighlighter language=\"javascript\" style={docco}>\r\n                {algorithm === \"bubble\" ? JS_BUBBLE : algorithm === \"quick\" ? JS_QUICK : algorithm === \"radix\" ? JS_RADIX : algorithm === \"merge\" ? JS_MERGE : ''}\r\n            </SyntaxHighlighter>\r\n        </div>\r\n    )\r\n}\r\n","export const JS_BUBBLE = `\r\nlet bubbleSort = (inputArr) => {\r\n    let len = inputArr.length;\r\n    for (let i = 0; i < len; i++) {\r\n        for (let j = 0; j < len; j++) {\r\n            if (inputArr[j] > inputArr[j + 1]) {\r\n                let tmp = inputArr[j];\r\n                inputArr[j] = inputArr[j + 1];\r\n                inputArr[j + 1] = tmp;\r\n            }\r\n        }\r\n    }\r\n    return inputArr;\r\n};\r\n`;\r\n\r\nexport const JS_MERGE = `\r\n// Merge function\r\nfunction merge(arr1, arr2){\r\n    let results = [];\r\n    let i = 0;\r\n    let j = 0;\r\n    while(i < arr1.length && j < arr2.length){\r\n        if(arr2[j] > arr1[i]){\r\n            results.push(arr1[i]);\r\n            i++;\r\n        } else {\r\n            results.push(arr2[j])\r\n            j++;\r\n        }\r\n    }\r\n    while(i < arr1.length) {\r\n        results.push(arr1[i])\r\n        i++;\r\n    }\r\n    while(j < arr2.length) {\r\n        results.push(arr2[j])\r\n        j++;\r\n    }\r\n    return results;\r\n}\r\n\r\n// Recrusive Merge Sort\r\nfunction mergeSort(arr){\r\n    if(arr.length <= 1) return arr;\r\n    let mid = Math.floor(arr.length/2);\r\n    let left = mergeSort(arr.slice(0,mid));\r\n    let right = mergeSort(arr.slice(mid));\r\n    return merge(left, sright);\r\n}\r\n`;\r\n\r\nexport const JS_QUICK = `\r\nfunction pivot(arr, start = 0, end = arr.length - 1) {\r\n  const swap = (arr, idx1, idx2) => {\r\n    [arr[idx1], arr[idx2]] = [arr[idx2], arr[idx1]];\r\n  };\r\n\r\n  // We are assuming the pivot is always the first element\r\n  let pivot = arr[start];\r\n  let swapIdx = start;\r\n\r\n  for (let i = start + 1; i <= end; i++) {\r\n    if (pivot > arr[i]) {\r\n      swapIdx++;\r\n      swap(arr, swapIdx, i);\r\n    }\r\n  }\r\n\r\n  // Swap the pivot from the start the swapPoint\r\n  swap(arr, start, swapIdx);\r\n  return swapIdx;\r\n}\r\n\r\n\r\nfunction quickSort(arr, left = 0, right = arr.length -1){\r\n    if(left < right){\r\n        let pivotIndex = pivot(arr, left, right)\r\n        //left\r\n        quickSort(arr,left,pivotIndex-1);\r\n        //right\r\n        quickSort(arr,pivotIndex+1,right);\r\n      }\r\n     return arr;\r\n}\r\n`;\r\n\r\nexport const JS_RADIX = `\r\nfunction getDigit(num, i) {\r\n  return Math.floor(Math.abs(num) / Math.pow(10, i)) % 10;\r\n}\r\n\r\nfunction digitCount(num) {\r\n  if (num === 0) return 1;\r\n  return Math.floor(Math.log10(Math.abs(num))) + 1;\r\n}\r\n\r\nfunction mostDigits(nums) {\r\n  let maxDigits = 0;\r\n  for (let i = 0; i < nums.length; i++) {\r\n    maxDigits = Math.max(maxDigits, digitCount(nums[i]));\r\n  }\r\n  return maxDigits;\r\n}\r\n\r\nfunction radixSort(nums){\r\n    let maxDigitCount = mostDigits(nums);\r\n    for(let k = 0; k < maxDigitCount; k++){\r\n        let digitBuckets = Array.from({length: 10}, () => []);\r\n        for(let i = 0; i < nums.length; i++){\r\n            let digit = getDigit(nums[i],k);\r\n            digitBuckets[digit].push(nums[i]);\r\n        }\r\n        nums = [].concat(...digitBuckets);\r\n        console.log(nums);\r\n    }\r\n    return nums;\r\n}\r\n`;\r\n\r\n//PYTHON\r\nexport const PY_BUBBLE = `\r\ndef bubbleSort(arr):\r\n    n = len(arr)\r\n  \r\n    # Traverse through all array elements\r\n    for i in range(n-1):\r\n    # range(n) also work but outer loop \r\n    # will repeat one time more than needed.\r\n  \r\n        # Last i elements are already in place\r\n        for j in range(0, n-i-1):\r\n  \r\n            # traverse the array from 0 to n-i-1\r\n            # Swap if the element found is greater\r\n            # than the next element\r\n            if arr[j] > arr[j+1] :\r\n                arr[j], arr[j+1] = arr[j+1], arr[j]\r\n`;\r\n\r\nexport const PY_MERGE = `\r\ndef mergeSort(arr):\r\n    if len(arr) > 1:\r\n \r\n         # Finding the mid of the array\r\n        mid = len(arr)//2\r\n \r\n        # Dividing the array elements\r\n        L = arr[:mid]\r\n \r\n        # into 2 halves\r\n        R = arr[mid:]\r\n \r\n        # Sorting the first half\r\n        mergeSort(L)\r\n \r\n        # Sorting the second half\r\n        mergeSort(R)\r\n \r\n        i = j = k = 0\r\n \r\n        # Copy data to temp arrays L[] and R[]\r\n        while i < len(L) and j < len(R):\r\n            if L[i] < R[j]:\r\n                arr[k] = L[i]\r\n                i += 1\r\n            else:\r\n                arr[k] = R[j]\r\n                j += 1\r\n            k += 1\r\n \r\n        # Checking if any element was left\r\n        while i < len(L):\r\n            arr[k] = L[i]\r\n            i += 1\r\n            k += 1\r\n \r\n        while j < len(R):\r\n            arr[k] = R[j]\r\n            j += 1\r\n            k += 1\r\n`;\r\n\r\nexport const PY_QUICK = `\r\n# This function takes last element as pivot, places\r\n# the pivot element at its correct position in sorted\r\n# array, and places all smaller (smaller than pivot)\r\n# to left of pivot and all greater elements to right\r\n# of pivot\r\n  \r\n  \r\ndef partition(arr, low, high):\r\n    i = (low-1)         # index of smaller element\r\n    pivot = arr[high]     # pivot\r\n  \r\n    for j in range(low, high):\r\n  \r\n        # If current element is smaller than or\r\n        # equal to pivot\r\n        if arr[j] <= pivot:\r\n  \r\n            # increment index of smaller element\r\n            i = i+1\r\n            arr[i], arr[j] = arr[j], arr[i]\r\n  \r\n    arr[i+1], arr[high] = arr[high], arr[i+1]\r\n    return (i+1)\r\n  \r\n# The main function that implements QuickSort\r\n# arr[] --> Array to be sorted,\r\n# low  --> Starting index,\r\n# high  --> Ending index\r\n  \r\n# Function to do Quick sort\r\n  \r\n  \r\ndef quickSort(arr, low, high):\r\n    if len(arr) == 1:\r\n        return arr\r\n    if low < high:\r\n  \r\n        # pi is partitioning index, arr[p] is now\r\n        # at right place\r\n        pi = partition(arr, low, high)\r\n  \r\n        # Separately sort elements before\r\n        # partition and after partition\r\n        quickSort(arr, low, pi-1)\r\n        quickSort(arr, pi+1, high)\r\n`;\r\n\r\nexport const PY_RADIX = `\r\ndef countingSort(arr, exp1):\r\n \r\n    n = len(arr)\r\n \r\n    # The output array elements that will have sorted arr\r\n    output = [0] * (n)\r\n \r\n    # initialize count array as 0\r\n    count = [0] * (10)\r\n \r\n    # Store count of occurrences in count[]\r\n    for i in range(0, n):\r\n        index = (arr[i] / exp1)\r\n        count[int(index % 10)] += 1\r\n \r\n    # Change count[i] so that count[i] now contains actual\r\n    # position of this digit in output array\r\n    for i in range(1, 10):\r\n        count[i] += count[i - 1]\r\n \r\n    # Build the output array\r\n    i = n - 1\r\n    while i >= 0:\r\n        index = (arr[i] / exp1)\r\n        output[count[int(index % 10)] - 1] = arr[i]\r\n        count[int(index % 10)] -= 1\r\n        i -= 1\r\n \r\n    # Copying the output array to arr[],\r\n    # so that arr now contains sorted numbers\r\n    i = 0\r\n    for i in range(0, len(arr)):\r\n        arr[i] = output[i]\r\n \r\n# Method to do Radix Sort\r\ndef radixSort(arr):\r\n \r\n    # Find the maximum number to know number of digits\r\n    max1 = max(arr)\r\n \r\n    # Do counting sort for every digit. Note that instead\r\n    # of passing digit number, exp is passed. exp is 10^i\r\n    # where i is current digit number\r\n    exp = 1\r\n    while max1 / exp > 0:\r\n        countingSort(arr, exp)\r\n        exp *= 10\r\n`;\r\n\r\n\r\nexport const Java_BUBBLE = `\r\n\r\n`;\r\n\r\nexport const Java_MERGE = `\r\n\r\n`;\r\n\r\nexport const Java_QUICK = `\r\n\r\n`;\r\n\r\nexport const Java_RADIX = `\r\n\r\n`;\r\n","import React, {useContext} from 'react';\r\nimport {PY_BUBBLE, PY_QUICK, PY_MERGE, PY_RADIX} from '../../Algorithms/Codes';\r\nimport {AlgorithmContext} from '../../context/Algorithm.context';\r\nimport SyntaxHighlighter from 'react-syntax-highlighter';\r\nimport { docco } from 'react-syntax-highlighter/dist/esm/styles/hljs';\r\n\r\nexport default function CodeView() {\r\n    const {algorithm} = useContext(AlgorithmContext);\r\n\r\n    return (\r\n        <div>\r\n            <SyntaxHighlighter language=\"python\" style={docco}>\r\n                {algorithm === \"bubble\" ? PY_BUBBLE : algorithm === \"quick\" ? PY_QUICK : algorithm === \"radix\" ? PY_RADIX : algorithm === \"merge\" ? PY_MERGE : ''}\r\n            </SyntaxHighlighter>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useContext} from 'react';\r\nimport {Java_BUBBLE, Java_QUICK, Java_MERGE, Java_RADIX} from '../../Algorithms/Codes';\r\nimport {AlgorithmContext} from '../../context/Algorithm.context';\r\nimport SyntaxHighlighter from 'react-syntax-highlighter';\r\nimport { docco } from 'react-syntax-highlighter/dist/esm/styles/hljs';\r\n\r\nexport default function CodeViewJava() {\r\n    const {algorithm} = useContext(AlgorithmContext);\r\n\r\n    return (\r\n        <div>\r\n            <SyntaxHighlighter language=\"java\" style={docco}>\r\n                {algorithm === \"bubble\" ? Java_BUBBLE : algorithm === \"quick\" ? Java_QUICK : algorithm === \"radix\" ? Java_RADIX : algorithm === \"merge\" ? Java_MERGE : ''}\r\n            </SyntaxHighlighter>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState, useEffect, useContext } from \"react\";\r\nimport { getBubbleSortAnimation } from \"../../Algorithms/BubbleSort\";\r\nimport { getMergeSortAnimations } from \"../../Algorithms/Test\";\r\nimport { getQuickSortAnimation } from \"../../Algorithms/QuickSort\";\r\nimport { getRadixSortAnimations } from \"../../Algorithms/RadixSort\";\r\nimport Explaination from '../Explaination/Explaination';\r\n\r\n\r\nimport \"./Visualizer.scss\";\r\n\r\nimport Navbar from \"../Navbar/Navbar\";\r\nimport CodeView from \"../CodeView/CodeView\";\r\nimport CodeViewPy from '../CodeView/CodeViewPy';\r\nimport CodeViewJava from '../CodeView/CodeViewJava';\r\nimport { AlgorithmContext } from \"../../context/Algorithm.context\";\r\n\r\nimport {\r\n  numberToWord,\r\n  placeCorrect,\r\n  colorChange,\r\n  swapAinmation,\r\n  randomIntFromInterval,\r\n  moveElementTo,\r\n  mergeColorChange,\r\n  completedColor,\r\n  ANIMATION_SPEED,\r\n  groupChangeColor,\r\n  UseInputState,\r\n} from \"./Helpers\";\r\n\r\n// export const ANIMATION_SPEED = 500;\r\n\r\nfunction Visualizer() {\r\n  const [array, setArray] = useState([]);\r\n  const [size, setSize] = useState(5);\r\n  const [speed, setSpeed] = UseInputState(500);\r\n  const [isDisabled] = useState(false);\r\n\r\n  useEffect(() => {\r\n    resetArray();\r\n  }, []);\r\n\r\n  function resetArray() {\r\n    const newArray = [];\r\n    for (let i = 0; i < size; i++) {\r\n      newArray.push(randomIntFromInterval(20, 550));\r\n    }\r\n    setArray(newArray);\r\n    completedColor(\"turquoise\");\r\n  }\r\n\r\n  const handleSizeChange = (e) => {\r\n    let value = Number(e.target.value);\r\n    setSize(() => value);\r\n    resetArray();\r\n  };\r\n\r\n  // const handleKeyDown = (e) => {\r\n  //   if(e.key === 'Enter') resetArray();\r\n  // }\r\n\r\n  const { algorithm } = useContext(AlgorithmContext);\r\n\r\n  const handleSort = () => {\r\n    // setIsDisabled(true);\r\n    if (algorithm === \"bubble\") {\r\n      bubbleSort(array, setArray);\r\n    } else if (algorithm === \"merge\") {\r\n      mergeSort(array, setArray);\r\n      // alert(\"Its yet to be implemented\")\r\n    } else if (algorithm === \"quick\") {\r\n      quickSort(array, setArray);\r\n      // alert(\"Its yet to be implemented\")\r\n    } else if (algorithm === \"radix\") {\r\n      // alert(\"Its yet to be implemented\")\r\n      radixSort(array, setArray);\r\n    } else {\r\n      alert(\"please select a choice\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"visualize\">\r\n      <Navbar\r\n        setArray={setArray}\r\n        mergeSort={mergeSort}\r\n        bubbleSort={bubbleSort}\r\n        quickSort={quickSort}\r\n        radixSort={radixSort}\r\n        array={array}\r\n        resetArray={resetArray}\r\n      />\r\n      \r\n\r\n      <Explaination />\r\n      <div className=\"input\">\r\n        <div className=\"input-size\">\r\n          <h3>Enter size </h3>\r\n          <input\r\n            type=\"range\"\r\n            min=\"5\"\r\n            max=\"25\"\r\n            value={size}\r\n            onChange={handleSizeChange}\r\n          />\r\n        </div>\r\n        <div className=\"input-size\">\r\n          <h3>Enter speed (Beta) </h3>\r\n          <input\r\n            type=\"range\"\r\n            min=\"50\"\r\n            max=\"1000\"\r\n            value={speed}\r\n            onChange={setSpeed}\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"visualize__algo\">\r\n        <div onClick={() => resetArray()} className=\"visualize__algo--arr\">\r\n          Random Array\r\n        </div>\r\n        <div\r\n          onClick={handleSort}\r\n          className={\r\n            isDisabled ? \"nav__algo--sort-disabled\" : \"visualize__algo--sort\"\r\n          }\r\n        >\r\n          Sort\r\n        </div>\r\n      </div>\r\n      <div className=\"bars\">\r\n        {array.map((value, idx) => {\r\n          let cls = numberToWord(value);\r\n          return (\r\n            <div\r\n              className={`array-bars ${cls}`}\r\n              key={idx}\r\n              style={{\r\n                background: \"turquoise\",\r\n                height: `${value}px`,\r\n              }}\r\n            >\r\n              {value}\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n\r\n      <div className=\"code\">\r\n        <div>\r\n          <b>Javascipt</b>\r\n\r\n          <CodeView />\r\n        </div>\r\n        <div>\r\n          <b>Python</b>\r\n          <CodeViewPy />\r\n        </div>\r\n        <div>\r\n          <b>Java</b>\r\n          <CodeViewJava />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n///////////////////////////////////////////////////////////////\r\n//BUBBLE SORT\r\n//////////////////////////////////////////////////////////////\r\nasync function bubbleSort(array, setArray) {\r\n  let animations = getBubbleSortAnimation(array);\r\n  // console.log(animations)\r\n\r\n  var i = 0;\r\n  function myLoop() {\r\n    setTimeout(function () {\r\n      if (animations[i].length === 1) {\r\n        if (animations[i][0] === \"sorted\") {\r\n          completedColor(\"#7deb34\");\r\n        } else {\r\n          placeCorrect(animations[i][0]);\r\n        }\r\n      } else if (animations[i][0] > animations[i][1]) {\r\n        swapAinmation(animations[i][0], animations[i][1]);\r\n      } else {\r\n        colorChange(animations[i][0], animations[i][1]);\r\n      }\r\n      i++;\r\n      if (i < animations.length) {\r\n        myLoop();\r\n      }\r\n    }, ANIMATION_SPEED);\r\n  }\r\n  myLoop();\r\n  setArray(array.sort());\r\n}\r\n\r\n///////////////////////////////////////////////////////////////\r\n//MERGE SORT\r\n//////////////////////////////////////////////////////////////\r\nasync function mergeSort(array, setArray) {\r\n  let animations = getMergeSortAnimations(array);\r\n  let i = 0;\r\n  async function myLoop() {\r\n    setTimeout(async function () {\r\n      if (i < animations.length - 1 && animations[i][0] === \"merge\") {\r\n        mergeColorChange(animations[i][1], animations[i][2]);\r\n      } else if (animations[i][0] === \"completed\") {\r\n        completedColor(\"#7deb34\");\r\n      } else if (animations[i][0] === \"compare\") {\r\n        colorChange(animations[i][1], animations[i][2]);\r\n      } else {\r\n        moveElementTo(animations[i][0], animations[i][1]);\r\n      }\r\n      i++;\r\n      if (i < animations.length) {\r\n        await myLoop();\r\n      }\r\n    }, ANIMATION_SPEED);\r\n  }\r\n  await myLoop();\r\n  setArray(array.sort());\r\n}\r\n\r\n///////////////////////////////////////////////////////////////\r\n//QUICK SORT\r\n//////////////////////////////////////////////////////////////\r\nasync function quickSort(array, setArray) {\r\n  let animations = [];\r\n  animations = getQuickSortAnimation(array);\r\n  animations.push([\"completed\"]);\r\n  let i = 0;\r\n  async function myLoop() {\r\n    setTimeout(async function () {\r\n      if (animations[i].length === 1) {\r\n        completedColor(\"#7deb34\");\r\n      } else if (animations[i][0] === \"compare\") {\r\n        colorChange(animations[i][1], animations[i][2]);\r\n      } else if (animations[i][0] === \"placed\") {\r\n        placeCorrect(animations[i][1]);\r\n      } else {\r\n        swapAinmation(animations[i][0], animations[i][1]);\r\n      }\r\n      i++;\r\n      if (i < animations.length) {\r\n        await myLoop();\r\n      }\r\n    }, ANIMATION_SPEED);\r\n  }\r\n  await myLoop();\r\n  setArray(array.sort());\r\n}\r\n\r\n///////////////////////////////////////////////////////////////\r\n//RADIX SORT\r\n//////////////////////////////////////////////////////////////\r\nfunction radixSort(array, setArray) {\r\n  const animations = getRadixSortAnimations(array);\r\n  animations.push([\"completed\"]);\r\n  // console.log(animations);\r\n  let i = 0;\r\n  function myLoop() {\r\n    setTimeout(function () {\r\n      if (animations[i].length === 1 && animations[i][0] === \"completed\") {\r\n        completedColor(\"#7deb34\");\r\n      } else if (animations[i][0] === \"digitBucket\") {\r\n        let digitBucket = animations[i][1];\r\n        for (let j = 0; j < digitBucket.length; j++) {\r\n          if (digitBucket[j].length !== 0) {\r\n            //changeColor\r\n            groupChangeColor(digitBucket[j]);\r\n            // console.log([\"group\", ...digitBucket[j]])\r\n          }\r\n        }\r\n      } else if (animations[i][0] === \"nums\") {\r\n        // console.log(animations[i][1]);\r\n        setArray(animations[i][1]);\r\n      }\r\n      i++;\r\n      if (i < animations.length) {\r\n        myLoop();\r\n      }\r\n    }, ANIMATION_SPEED + 500);\r\n  }\r\n  myLoop();\r\n}\r\n\r\nexport default Visualizer;\r\n","import Visualizer from \"./Components/Visualizer/Visualizer\";\r\nimport { AlgorithmProvider } from \"./context/Algorithm.context\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <AlgorithmProvider>\r\n        <Visualizer />\r\n      </AlgorithmProvider>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n"],"sourceRoot":""}